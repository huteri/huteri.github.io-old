<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Huteri Manza Blog]]></title>
  <link href="http://huteri.me/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://huteri.me/"/>
  <updated>2019-09-13T13:55:45+08:00</updated>
  <id>http://huteri.me/</id>
  <author>
    <name><![CDATA[Huteri Manza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Decoder Failed to Init - Exoplayer in ViewPager]]></title>
    <link href="http://huteri.me/2019/09/13/decoder-failed-to-init-exoplayer-in-viewpager/"/>
    <updated>2019-09-13T13:52:53+08:00</updated>
    <id>http://huteri.me/2019/09/13/decoder-failed-to-init-exoplayer-in-viewpager</id>
    <content type="html"><![CDATA[<p>There are number of limitations on how many we can initialize exoplayer in 1 device. Initialize more than it should be will cause exoplayer to throw exception that is not easy to debug and break the whole video player in the app.</p>

<!--more-->


<p>It&rsquo;s pretty common when we initialize exoplayer in viewpager, depends on where we initialize exoplayer. it can keep creating new instance everytime we swipe or navigate to another screen and come back.</p>

<p>Exception thrown from emulator as my experiments related with AudioTrack.</p>

<pre><code>playerFailed [0.58, 1]
    com.google.android.exoplayer2.ExoPlaybackException: com.google.android.exoplayer2.audio.AudioSink$InitializationException: AudioTrack init failed: 0, Config(32000, 12, 32000)
        at com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.processOutputBuffer(MediaCodecAudioRenderer.java:738)
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.drainOutputBuffer(MediaCodecRenderer.java:1507)
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.render(MediaCodecRenderer.java:653)
        at com.google.android.exoplayer2.ExoPlayerImplInternal.doSomeWork(ExoPlayerImplInternal.java:575)
        at com.google.android.exoplayer2.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:326)
        at android.os.Handler.dispatchMessage(Handler.java:102)
        at android.os.Looper.loop(Looper.java:164)
        at android.os.HandlerThread.run(HandlerThread.java:65)
     Caused by: com.google.android.exoplayer2.audio.AudioSink$InitializationException: AudioTrack init failed: 0, Config(32000, 12, 32000)
        at com.google.android.exoplayer2.audio.DefaultAudioSink$Configuration.buildAudioTrack(DefaultAudioSink.java:1415)
        at com.google.android.exoplayer2.audio.DefaultAudioSink.initialize(DefaultAudioSink.java:514)
        at com.google.android.exoplayer2.audio.DefaultAudioSink.handleBuffer(DefaultAudioSink.java:595)
        at com.google.android.exoplayer2.audio.MediaCodecAudioRenderer.processOutputBuffer(MediaCodecAudioRenderer.java:732)
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.drainOutputBuffer(MediaCodecRenderer.java:1507) 
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.render(MediaCodecRenderer.java:653) 
        at com.google.android.exoplayer2.ExoPlayerImplInternal.doSomeWork(ExoPlayerImplInternal.java:575) 
        at com.google.android.exoplayer2.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:326) 
        at android.os.Handler.dispatchMessage(Handler.java:102) 
        at android.os.Looper.loop(Looper.java:164) 
        at android.os.HandlerThread.run(HandlerThread.java:65) 
</code></pre>

<p>As for my google pixel will throw <code>Decoder init failed: OMX.qcom.video.decoder.avc...</code></p>

<p>To solve this, track how many initialization happened in the app and how many times it released.</p>

<p>Filter the logcat by <code>ExoPlayerImpl</code> will give result like this</p>

<pre><code>Init b27c0c5 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 47cabd7 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init e299218 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release e299218 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init 84cae8b [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 47a1ebd [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 2b65814 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release 2b65814 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init c5b3e6 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init e364140 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init a7adbbe [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release a7adbbe [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init 35bee65 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 25a4fc7 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 39147e8 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release 39147e8 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init 8749a97 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init ad6ca69 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init ef20e73 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release ef20e73 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init f79bc02 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 623a87c [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init eaa033c [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release eaa033c [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init 5fd9dcd [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 99a43ef [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 77a19e0 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release 77a19e0 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init 21ae6b3 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init d8455a5 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Init 971d6c2 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
Release 971d6c2 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
Init d1895ef [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
</code></pre>

<p>Exoplayer kept initializing 2 instances but never release it, as for 3rd instance is fine, because it released after that but for the first 2 instance, there are no logcat of releasing it and it kept adding new instances everytime.</p>

<p>The solution can be as simple as null checking before initializing it</p>

<pre><code>   if(player != null)
      return

    player = ExoPlayer(context)
    player?.initialize()
</code></pre>

<p>This is what it looks like after null checking</p>

<pre><code>
I/ExoPlayerImpl: Init cfbe42d [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Init 369091e [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Init 74f26bf [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release 74f26bf [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init 3a6dbd2 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release 3a6dbd2 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init 6b25a8d [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release 6b25a8d [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init 4dda146 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release 4dda146 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init 96c7128 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release 96c7128 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init 9068361 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release 9068361 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init a4681ac [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release a4681ac [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init b6c38f2 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release b6c38f2 [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init d62768b [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release d62768b [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
I/ExoPlayerImpl: Init e65a93c [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29]
I/ExoPlayerImpl: Release e65a93c [ExoPlayerLib/2.10.4] [taimen, Pixel 2 XL, Google, 29] [goog.exo.core, goog.exo.ui, goog.exo.hls]
</code></pre>

<p>It still never releases the first 2 instances, but also never create new one, as it reuses the instances.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Dynamic JSONAPI Format With Retrofit in Android]]></title>
    <link href="http://huteri.me/2015/10/16/handling-dynamic-jsonapi-format-with-retrofit-in-android/"/>
    <updated>2015-10-16T14:31:35+08:00</updated>
    <id>http://huteri.me/2015/10/16/handling-dynamic-jsonapi-format-with-retrofit-in-android</id>
    <content type="html"><![CDATA[<p>Sometimes working with json can be frustrating if we don’t understand how the dependencies work such as retrofit and JSONAPI.org</p>

<!--more-->


<p>Look on this json format</p>

<pre><code class="json">{
  "data": [
    {
      "id": "561c7ef2eab7094edd000019",
      "type": "orders",
      "attributes": {
        "inquiry_ticket": 65074547,
        "invoice_number": 120033,
        "unique_code": 702,
        "custom_vendor": null,
        "cod": false,
        "payment_status": "unpaid",
        "payment_time": null,
        "status": "initial",
        "created_at": "2015-10-13T10:48:02.494+07:00",
        "updated_at": "2015-10-13T10:48:02.494+07:00"
      },
      "links": {
        "self": "/orders/561c7ef2eab7094edd000019"
      },
      "relationships": {
        "user": {
          "links": {
            "self": "/orders/561c7ef2eab7094edd000019/relationships/user",
            "related": "/orders/561c7ef2eab7094edd000019/user"
          }
        },
        "inquiry": {
          "links": {
            "self": "/orders/561c7ef2eab7094edd000019/relationships/inquiry",
            "related": "/orders/561c7ef2eab7094edd000019/inquiry"
          }
        },
        "payment_confirm": {
          "links": {
            "self": "/orders/561c7ef2eab7094edd000019/relationships/payment_confirm",
            "related": "/orders/561c7ef2eab7094edd000019/payment_confirm"
          }
        },
        "sub_category": {
          "links": {
            "self": "/orders/561c7ef2eab7094edd000019/relationships/sub_category",
            "related": "/orders/561c7ef2eab7094edd000019/sub_category"
          }
        },
        "category": {
          "links": {
            "self": "/orders/561c7ef2eab7094edd000019/relationships/category",
            "related": "/orders/561c7ef2eab7094edd000019/category"
          },
          "data": {
            "type": "categories",
            "id": "561491daeab7090bb4000001"
          }
        },
        "ordered_items": {
          "links": {
            "self": "/orders/561c7ef2eab7094edd000019/relationships/ordered_items",
            "related": "/orders/561c7ef2eab7094edd000019/ordered_items"
          },
          "data": [
            {
              "type": "ordered-items",
              "id": "560a523aeab709322b000014"
            }
          ]
        }
      }
    }
  ],
  "included": [
    {
      "id": "560a523aeab709322b000014",
      "type": "ordered-items",
      "attributes": {
        "description": "martabk",
        "purchased": 50000,
        "sell": 55000,
        "margin": null
      },
      "links": {
        "self": "/ordered-items/560a523aeab709322b000014"
      }
    },
    {
      "id": "561491daeab7090bb4000001",
      "type": "categories",
      "attributes": {
        "name": "Transportation",
        "cname": "transport",
        "sub_categories": [
          {
            "_id": {
              "$oid": "56161982eab7092dda000001"
            },
            "category_id": {
              "$oid": "561491daeab7090bb4000001"
            },
            "cname": "Transport",
            "created_at": "2015-10-08T14:21:38.236+07:00",
            "name": "Transport",
            "updated_at": "2015-10-08T14:21:38.236+07:00"
          }
        ]
      },
      "links": {
        "self": "/categories/561491daeab7090bb4000001"
      }
    }
  ]
}
</code></pre>

<p>JSON format is one of recommendation from JSONAPI.org and our company has used this format for the restful api, and now as an Android Developer, I need to parse those format.</p>

<p>On android side, I used retrofit for beautiful type safe Restful for android. I could parse almost everything except 1 object, the ‘included’ object. Now look on that object, and you will realize that it’s an object with array inside it. The problem was that the array is not a single data type. There are multiple type of data inside the array, and retrofit does not really support json array with multiple data types like this.</p>

<p>I believe there is a better way to solve this problem or maybe retrofit v2.0 supports this kind of issue, need more research about this.</p>

<p>As you might guess, I need to use more advanced solution and deep modification on the retrofit and gson side</p>

<h3>Solution</h3>

<p>First, I need to have a model that consists of all the data types inside of the json array. In the json array, we have 2 types, the categories and ordered-items, so I created the model like this</p>

<pre><code class="java">public class IncludedModel extends BaseModel {

    private OrderedItem orderedItem;
    private Category category;

    public Object getObject() {
        switch (getType()) {
            case ModelType.ORDERED_ITEMS:
                return getOrderedItem();
            case ModelType.CATEGORIES:
                return getCategory();
        }

        return null;
    }

    public OrderedItem getOrderedItem() {
        return orderedItem;
    }

    public void setOrderedItem(OrderedItem orderedItem) {
        this.orderedItem = orderedItem;
    }

    public Category getCategory() {
        return category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    @Override
    public String toString() {
        return "IncludedModel{" +
                "orderedItem=" + orderedItem +
                ", category=" + category +
                '}';
    }
}
</code></pre>

<p>Then I need to create a custom deserializer, and we need this deserializer only for that specific object, and fortunately, Retrofit is really extensible and I can make such modification easily.</p>

<p>So, I created a simple deserializer like this one</p>

<pre><code class="java">public class IncludedModelDeserializer implements JsonDeserializer&lt;ArrayList&lt;IncludedModel&gt;&gt; {
    @Override
    public ArrayList&lt;IncludedModel&gt; deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        ArrayList&lt;IncludedModel&gt; list = new ArrayList&lt;&gt;();

        JsonArray jsonArray = json.getAsJsonArray();

        for(JsonElement object: jsonArray) {

            LogUtils.d(object.toString());
            JsonObject jsonObject = object.getAsJsonObject();
            String id = jsonObject.get("id").getAsString();
            String type = jsonObject.get("type").getAsString();

            IncludedModel model = new IncludedModel();
            model.setId(id);
            model.setType(type);

            Gson gson = new Gson();
            switch(type) {
                case ModelType.ORDERED_ITEMS:
                    OrderedItem orderedItem = gson.fromJson(jsonObject, OrderedItem.class);
                    model.setOrderedItem(orderedItem);
                    break;
                case ModelType.CATEGORIES:
                    Category category = gson.fromJson(jsonObject, Category.class);
                    model.setCategory(category);
                    break;
            }

            list.add(model);
        }

        return list;
    }
}
</code></pre>

<p>Look, I implemented JSONDeserializer with <code>Arraylist&lt;IncludedModel&gt;</code> as the type. If you look closely, I’m separating JSON Array into each object, and then I parsed manually the object with Gson, and then put it into the model.</p>

<p>After that I created a custom gson with this deserializer, and register the gson to retrofit</p>

<pre><code class="java">Type type = new TypeToken&lt;ArrayList&lt;IncludedModel&gt;&gt;(){}.getType();
GsonBuilder gsonBuilder = new GsonBuilder();
gsonBuilder.registerTypeAdapter(type, new IncludedModelDeserializer());
Gson gson = gsonBuilder.create();

RestAdapter.Builder builder = new RestAdapter.Builder()
                .setEndpoint(Config.SERVER_NAME)
                .setConverter(new GsonConverter(gson))
                .setLogLevel(RestAdapter.LogLevel.NONE);
</code></pre>

<p>Then, we just do process as usual, and retrofit will do the rest. If you also use JSONAPI format then I also recommend you to put the included data into Hashmap such as this</p>

<pre><code class="java">private HashMap&lt;String, IncludedModel&gt; mIncludedList;

private void addIncludedOrderedItemToList(ArrayList&lt;IncludedModel&gt; included) {
  for(IncludedModel item: included) {
    mIncludedList.put(item.getId(), item);
  }
}
</code></pre>

<p>Because it’s going to be easier for you to get the data based on the id of the object,</p>

<pre><code class="java">Category category = (Category) mIncludedList.get("id").getObject();
</code></pre>

<p>Hope it’s useful</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beware of Setting Image Resource for Preview in XML for Android]]></title>
    <link href="http://huteri.me/2015/07/11/beware-of-setting-image-resources-for-preview-purpose-in-xml/"/>
    <updated>2015-07-11T14:31:54+08:00</updated>
    <id>http://huteri.me/2015/07/11/beware-of-setting-image-resources-for-preview-purpose-in-xml</id>
    <content type="html"><![CDATA[<p>For the past hours, I had been struggling to find the cause of <code>OutofMemoryException</code>. I know It’s really common issue with image in Android. I used to have this issue in my first 6 months of learning Android and I thought I had ate enough but guess what, seems like it’s not happenning today.</p>

<!--more-->


<p>Sometimes, when we write a layout file, we want to preview the result and if the layout has an ImageView then we also want to see the image by just giving the image resources in xml. Beware of that, by the time you set image resource in image view for only preview purpose, don’t forget to remove it. If we forget to remove it, then in the runtime the image will be loaded and suck the app memory.</p>

<p>It would seem fine if the image is only loaded once but what if the sample image is on item layout, and we use the layout in recycler view (listview)? the sample image will be loaded in every single item you have in the list. Just multiply it with the size of the image, that is how the app becomes a memory sucker.</p>

<p>I made this mistake, and fortunately I used a really big image, so the exception was always raised.</p>

<p>Here is the example of pre set image resources</p>

<pre><code class="xml"> &lt;ImageView
  android:id="@+id/iv_preview"
  android:layout_width="match_parent"
  android:layout_height="200dp"
  android:layout_below="@+id/tv_title"
  android:adjustViewBounds="true"
  android:scaleType="centerCrop"
  android:src="@drawable/budget_preview"
/&gt;
</code></pre>

<p><code>budget_preview.png</code> is a really big image. With default activity, my app only uses around 20mb of memory,</p>

<p><img src="/images/post/ram_usage_1.png"></p>

<p>but after open the activity with only 3 items with that layout, it jumped into 90mb, scroll a little bit, OOM was raised.</p>

<p><img src="/images/post/ram_usage_2.png"></p>

<p>So don’t forget to remove android:src after you finish preview, and you’ll probably save a good memory
Hope it’s usefull.</p>

<h4>Protip from +Christophe Beyls</h4>

<p>Use tools:src instead of android:src to get the preview image in Android Studio with zero impact on runtime <a href="http://tools.android.com/tips/layout-designtime-attributes">http://tools.android.com/tips/layout-designtime-attributes</a></p>
]]></content>
  </entry>
  
</feed>
